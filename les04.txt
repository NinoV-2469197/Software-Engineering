- communicatie mag informeel zijn tussen het team
- focus op wat nodig is
- scrum master doet niet veel en zorgt dat de devs met rust gelaten worden
- EXAMEN!!: Agile methodes vergelijken, verticaal (korte iteraties onder, lange boven)
- 4 agile processen: evo is 1 week (5dagen maandag-vrijdag)
- bij evo weinig tot veel documentatie.
- Exterme programming 1 week tot 20 dagen, korte iteraties, begint heel links dus zeer weinig documentatie (enige zijn misschien unit tests maar gaat vooral over code)
- Scrum begin 2010 populair (2016 really). Exact 30 dagen iteratie. 
- Scrum zegt weinig over software en documentatie.
- UP: 1 week tot 30 dagen. Unified programming. Use-cases ...
- Sofware analysis niet nodig bij XP. Je gaat een min prototype maken om aan de klant te demo'en.
- cockburn scale is ook een agile methode. 4 dingen die verloren gaan als iets faalt qua software.
- Essential money is geld dat echt nodig is. Fondsen etc
- Als u software levens of geld kost is documentatie meer nodig (ceremonitieel). Je moet kunnen bewijzen ..
- Unit testen en acceptance testen worden gebruikt bij XP.
- XP lost een faaldend project niet op maar scrum wel
- Scrum heeft lange iteraties and meer ceremonitieel. 
- Scrum (PO, scrummaster en devs), Ceremonies like sprint planning, daily stand-ups, and sprint retrospectives are key to keeping the team aligned and ensuring continuous improvement.

Ceremonies (Scrum Rituals) in Scrum:
Sprint Planning: At the start of each sprint, the team decides what they’ll work on and sets goals.
Daily Stand-ups: Short daily meetings (usually 15 minutes) where team members share what they worked on, plan for the day, and discuss any blockers.
Sprint Review: At the end of each sprint, the team demos what they built and collects feedback from stakeholders.
Sprint Retrospective: After the sprint, the team reflects on what went well, what didn’t, and what could be improved for the next sprint.

- Key Differences:
- XP: Less about process/management, more about engineering practices.
- Scrum: More formal ceremonies and roles, structured management of the team's work.

- A domain model is no software model but can be modified to be a class diagram
In essence, a class diagram is more about the technical implementation of a system, while a domain model is about understanding the real-world concepts that the system is built to represent.
- Not to many relations in domain model.

Cristal process moeten we niet kennen, de processen in blackboard wel.
